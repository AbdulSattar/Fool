%{
open Ast
%}

%start start

%token DELIM COMMA OPAREN CPAREN OBLOCK CBLOCK EOF
%token IF ELSE WHILE FOR TO DOWNTO READ WRITE
%token INTTYPE FLOATTYPE CHARTYPE STRINGTYPE BOOLTYPE
%token ASSIGN
%token PLUS MINUS TIMES DIVIDE
%token EQ NEQ GT LT GTE LTE
%token <string> IDENT
%token <string> STRINGLIT
%token <System.Int32> INTLIT
%token <System.Double> FLOATLIT
%token <System.Char> CHARLIT
%token TRUE FALSE

%type <Prog> start

%%

start: 
    | Stmts EOF { StmtsProg($1) }

Block:
    | OBLOCK Stmts CBLOCK { StmtsBlock($2) }

Stmts:
    | StmtsList { StmtsList(List.rev $1) }

StmtsList:
    | StmtsList Stmt { $2 :: $1 }
    | Stmt {[$1]}

Stmt:
    | Type IdentList DELIM { DeclStmt($1,$2) } 
    | Assign DELIM { AssignStmt($1) }
    | IF OPAREN Bool CPAREN Block ELSE Block { IfStmt($3, $5, $7) }
    | WHILE OPAREN Bool CPAREN Block { WhileStmt($3, $5) }
    | FOR OPAREN Assign TO Expr CPAREN Block { ForToStmt($3,$5,$7) }
    | FOR OPAREN Assign DOWNTO Expr CPAREN Block { ForDownToStmt($3,$5,$7) }
    | FOR OPAREN Assign DELIM Bool DELIM Assign CPAREN Block { ForStmt($3, $5, $7, $9) }
    | READ Identifier DELIM { ReadStmt($2) }
    | WRITE Value DELIM { WriteStmt($2) }
    | Block { BlockStmt($1) }

IdentList:
    | IdentListList { IdentList(List.rev $1) }

IdentListList:
    | IdentListList COMMA IdentDeclOptAssign { $3 :: $1 }
    | IdentDeclOptAssign { [$1] }

IdentDeclOptAssign:
    | Assign { Assign($1) }
    | Identifier { Ident($1) }

Assign:
    | Identifier ASSIGN Value { AssignValue($1, $3) }

Expr:
    | Expr PLUS Term { Plus($1, $3) }
    | Expr MINUS Term { Minus($1, $3) }
    | Term { TermExpr($1) }

Term:
    | Term TIMES Factor { Times($1, $3) }
    | Term DIVIDE Factor { Divide($1, $3) }
    | Factor { FactorTerm($1) }

Factor:
    | Int { IntFactor($1) }
    | OPAREN Expr CPAREN { ParenExpr($2) }

RelExpr:
    | Expr RelOp Expr { RelExpr($1, $3, $2) }

RelOp:
    | EQ { Eq }
    | NEQ { Neq }
    | GT { Gt }
    | LT { Lt }
    | GTE { Gte }
    | LTE { Lte }

Value:
    | Expr { ExprValue($1) }
    | Float { FloatValue ($1) }
    | Char { CharValue ($1) }
    | String { StringValue($1) }
    | Bool { BoolValue($1) }

Int:
    | Identifier { IdentInt($1) }
    | INTLIT { IntLit($1) }

Float:
    | Identifier { IdentFloat($1) }
    | FLOATLIT { FloatLit($1) }

Char:
    | Identifier { IdentChar($1) }
    | CHARLIT { CharLit($1) }

String:
    | Identifier { IdentString($1) }
    | STRINGLIT { StringLit($1) }

Bool:
    | RelExpr { BoolRelExpr($1) }
    | Identifier { IdentBool($1) }
    | TRUE { TrueBool }
    | FALSE { FalseBool }

Type:
    | INTTYPE { IntType }
    | FLOATTYPE { FloatType }
    | CHARTYPE { CharType }
    | STRINGTYPE { StringType }
    | BOOLTYPE { BoolType }

Identifier:
    | IDENT { Identifier($1) }