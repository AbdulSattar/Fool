{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme = LexBuffer<char>.LexemeString

let escape =
    function
    | "\\n" -> '\n'
    | "\\a" -> '\a'
    | "\\t" -> '\t'
    | "\\r" -> '\r'
    | "\\\\"-> '\\'
    | s     -> s.[0]
}

// These are some regular expression definitions
let digit = ['0'-'9']
let alpha = ['a'-'z' 'A'-'Z' '_']
let ident = alpha (alpha | digit)*
let namespace = "open " ident ('.' ident)*
let newline = ('\n' | '\r' '\n')
let comment = "//" [^'\r' '\n']*
let escapes = "\\n" | "\\a" | "\\t" | "\\r" | "\\\\"
let char = "'" ( escapes | "\\'" | [^ '\'']) "'"

rule tokenize = parse
| ' '            { tokenize lexbuf }
| newline        { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| comment        { tokenize lexbuf }
| '\"'           {
                     let sb = new System.Text.StringBuilder()
                     STRINGLIT (string sb lexbuf)
                 }
//Keywords
| "type"         { TYPE }
| "read"         { READ }
| "write"        { WRITE }
| "new"          { NEW }
| "return"       { RETURN }
| "fun"          { FUN }
| "for"          { FOR }
| "to"           { TO }
| "downto"       { DOWNTO }
| "if"           { IF }
| "elif"         { ELIF }
| "else"         { ELSE }
| "while"        { WHILE }

// Reserved Words
| "true"         { TRUE }
| "false"        { FALSE }

// Identifiers
| ident          { IDENT (lexeme lexbuf) }
| namespace      { NAMESPACE (lexeme lexbuf) }

| '='            { ASSIGN }
| ';'            { DELIM }
| ','            { COMMA }
| '.'            { PERIOD }
| "->"           { ARROW }
| ':'            { COLON }

// Operators
| '-'            { MINUS }
| '+'            { PLUS }
| '*'            { MULT }
| '/'            { DIV }
| '>'            { GT }
| '<'            { LT }
| "=="           { EQ }
| "!="           { NEQ }
| ">="           { GTE }
| "<="           { LTE }
| "!"            { NOT }

// Braces
| '(' { LPAREN }
| ')' { RPAREN }
| '{' { LBRACE }
| '}' { RBRACE }

// Numbers
| digit+                                     { INTLIT (Int32.Parse(lexeme lexbuf)) }
| digit+ '.' ((digit+) (['e' 'E'] digit+)?)? { FLOATLIT (Convert.ToDouble(lexeme lexbuf)) }

// Chars
| char          { CHARLIT ((lexeme lexbuf).Trim(''') |> escape) }

// EOF
| eof   { EOF }

and string s = parse
| "\\\""           { s.Append('\"') |> ignore; string s lexbuf }
| '\"'             { s.ToString() }
| escapes          { lexeme lexbuf |> escape |> s.Append |> ignore; string s lexbuf }
| eof              { failwithf "Incomplete string" }
| _                { s.Append(lexeme lexbuf) |> ignore; string s lexbuf }
